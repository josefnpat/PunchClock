#!/usr/bin/php
<?php

define("PC_DB","db.dat");
define("DATE_FORMAT","Y-m-d H:s");
define("DATE_FORMAT_LEN",strlen(date(DATE_FORMAT)));
define("E_RUN","Error: PunchClock is running. Use `punchclock out` to end.\n");
define("E_INVUP","Error: Invalid index supplied to --update flag.\n");
define("E_NRUN","Error: PunchClock is not running. Use `punchclock in` to start.\n");
define("E_NOEN","Error: No entries availible.\n");

$options = yago("-t!,--time!,-u!,--update!,--tag!");

touch(PC_DB);

if(isset($options['operands'][1])){
  if($options['operands'][1] == "in"){ // PUNCH IN
    $db = load();
    $u = update_flag($options);
    $obj = new stdClass();
    $obj->start = time_flag($options);

    if(isset($options['flags']['--tag'])){
      $obj->tag = $options['flags']['--tag'];
    }
    if(count($db)>0){ // There are entries/
      if($u === NULL){ // No update flag
        $last = count($db)-1;
        if($db[$last]->end == ""){ // Clock is running.
          echo E_RUN;
        } else { // Clock is not running.
          $db[] = $obj;
          save($db);
        }
      } else { // Update flag
        if(isset($db[$u])){ // Update index exists
          if(isset($options['flags']['--tag'])){
            $db[$u]->tag = $options['flags']['--tag'];
          }
          $db[$u]->start = $obj->start;
          save($db);
        } else { // Update index does not exist
          echo E_INVUP;
        }
      }
    } else { // No prior entries.
      $db[] = $obj;
      save($db);
    }
  } elseif($options['operands'][1] == "out"){ // PUNCH OUT
    $db = load();
    $t = time_flag($options);
    $u = update_flag($options);
    if(count($db)>0){ // There are entries
      if($u === NULL){ // No update flag
        $last = count($db)-1;
        if($db[$last]->end == ""){ // Clock is running.
          $db[$last]->end = $t;
          save($db);
        } else { // Clock is not running.
          echo E_NRUN;
        }
      } else { // Update flag
        if(isset($db[$u])){ // Update index exists
          $db[$u]->end = $t;
          save($db);
        } else { // Update index does not exist
          echo E_INVUP;
        }
      }
    } else { // No prior entries
      echo E_NRUN;
    }
  } elseif($options['operands'][1] == "list"){ // PUNCH LIST
    $db = load();
    if(count($db)>0){ // Entries
      $key_pad = ceil(log10(count($db)));
      foreach($db as $key => $obj){
        if(isset($options['flags']['--tag']) and
          $options['flags']['--tag'] != $obj->tag) {
          continue;
        }
        echo str_pad($key,$key_pad). " : ";
        echo date(DATE_FORMAT,$obj->start)." > ";
        if(isset($obj->end) and $obj->end != ""){
          echo date(DATE_FORMAT,$obj->end);
        } else {
          echo str_pad("now",DATE_FORMAT_LEN);
        }
        echo " - ";
        if($obj->end == ""){
          $obj->end = time();
        }
        echo $obj->end - $obj->start." s";
        if(isset($obj->tag) and $obj->tag != ""){
          echo " [".$obj->tag."]";
        }
        echo "\n";
      }
    } else { // No entires
      echo E_NOEN;
    }
  } else {
    man();
  }
} else {
  man();
}

function ago($difference){
   //$difference = time() - $timestamp;
   $periods = array("second", "minute", "hour", "day", "week", "month", "years", "decade");
   $lengths = array("60","60","24","7","4.35","12","10");
   for($j = 0; $difference >= $lengths[$j]; $j++)
   $difference /= $lengths[$j];
   $difference = round($difference);
   if($difference != 1) $periods[$j].= "s";
   $text = "$difference $periods[$j] ago";
   return $text;
  }

function time_flag($options){
  if(isset($options['flags']['-t'])){
    return $options['flags']['-t'];
  } elseif(isset($options['flags']['--time'])){
    return $options['flags']['--time'];
  } else {
    return time();
  }
}

function update_flag($options){
  if(isset($options['flags']['-u'])){
    return $options['flags']['-u'];
  } elseif(isset($options['flags']['--update'])){
    return $options['flags']['--update'];
  }
}

function load(){
  $lines = file(PC_DB,FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES);
  $db = array();
  foreach($lines as $line){
    $data = explode(",",$line);
    $obj = new stdClass();
    $obj->start = $data[0];
    if(isset($data[1])){
      $obj->end = $data[1];
      if(isset($data[2])){
        $obj->tag = $data[2];
      } else {
        $obj->tag = "";
      }
    } else {
      $obj->end = "";
      $obj->tag = "";
    }
    $db[] = $obj;
  }
  return $db;
}

function save($db){
  $string = "";
  foreach($db as $obj){
    $string .= $obj->start.",".@$obj->end.",".@$obj->tag."\n";
  }
  file_put_contents(PC_DB,$string);
}

function man(){
?>
Usage: punchclock [OPTION] [FLAGS...]
PunchClock is a cli time tracker.

Examples:
  punchclock in --time 1234567890   # Punch in at the time 123456788990.
  punchclock out --update 2         # Change entry #2 punch out time to now.
  punchclock in -u 4 -t 123         # Update entry #5 punch in time to 123.
  punchclock in --tag ClientA       # Set tag to ClientA.
  punchclock in -u 3 --tag ClientB  # Update entry #3 to ClientB.
  punchclock list                   # Show logged punches.
  punchclock list --tag ClientA     # Show logged punches with tag ClientA.

  Options:
    in            Punch in with current time.
    out           Punch out with current time.
    list          Show logged punches.

  Flags:
  -t, --time [time]       Use specific time instead of now.
  -u, --update [index]    Update entry time.
  --tag [tag]             Use a specific tag.
<?php
}

/**
 * Yet Another Get Options
 *
 * This function will provide a simple alternative to *nix's getopt that has
 * some extended features found in GNU's getopts.
 *
 * @author josefnpat <seppi@josefnpat.com>
 *
 * @param $raw_flags
 *   This string represents the flags that should be parsed by this function.
 *   The flags that this function will look for is seperated by commas. E.g.;
 *   "-d,--debug,-n!,--name!"
 *   If flag has an exclamation mark (`!`) at the end, the function will
 *   assume that the flag is expecting an argument.
 * @param $argv|NULL
 *   This is the argument vector provided when a script is invoked by php-cli.
 *   By default, it will use the global `$argv`, but can be overridden by
 *   passing an array of arguments.
 *
 * @return
 *   The returned data will consist of a nexted associative array containing:
 *   - operands: an array of arguments that are not flags or flag operands
 *   - flags: an associtave array of flags that were found. If the flag is;
 *     - expecting an argument: the value will be assigned.
 *     - not expecting an arguement: the value will be null.
 */


function yago($raw_flags,$argv=NULL){
  if($argv === NULL){
    global $argv;
  }
  $stack = array();
  $stack['operands'] = array();
  $stack['flags'] = array();
  $search_flags = explode(",",$raw_flags);
  while(!empty($argv)){
    $arg = array_shift($argv);
    if(in_array($arg,$search_flags)){
      $stack['flags'][$arg] = NULL;
    } elseif(in_array("$arg!",$search_flags)){
      $stack['flags'][$arg] = array_shift($argv);
    } elseif(substr($arg,0,1)!="-") {
      $stack['operands'][] = $arg;
    }
  }
  return $stack;
}